using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Views.Grid;
using System.IO;
using BSServer.Controllers;
using BSCommon.Models;

namespace BSClient
{
    public partial class VoucherControl : DevExpress.XtraEditors.XtraUserControl
    {
        public VoucherControl()
        {
            InitializeComponent();

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            //dbContext = new DXBlueStarGroup_V3.BlueStarGroupEntities();
            //// Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            //dbContext.VouchersTypes.LoadAsync().ContinueWith(loadTask =>
            //{
            //    // Bind data to control when loading complete
            //    gridControlVoucher.DataSource = dbContext.VouchersTypes.Local.ToBindingList();
            //}, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());

            // int A = columnPrice.VisibleIndex; // A returns "5"

            //hide the "Price" column
            //  columnPrice.Visible = false;
            // int B = columnPrice.VisibleIndex; // B returns "-1"

            //show the "Price" column again
            // columnPrice.Visible = true;
            // int C = columnPrice.VisibleIndex; // C returns "5"
            //col
            VouchersTypeController voucherstype = new VouchersTypeController();
            List<VouchersType> vouchersT = voucherstype.GetVouchersTypeInfo("1");
            searchLookUpEditLoaiChungTu.Properties.DataSource = vouchersT;
            searchLookUpEditLoaiChungTu.Properties.NullText = "Chọn loại chứng từ";
            searchLookUpEditLoaiChungTu.Properties.ValueMember = "SummaryName";
            searchLookUpEditLoaiChungTu.Properties.DisplayMember =  "Name";

        }

        private void tableLayoutPanel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void VoucherControl_Load(object sender, EventArgs e)
        {
           // bool test = dateEditBDKT.SelectedRanges.IsDateSelected(DateTime.Now);
          // searchLookUpEditLoaiChungTu.it
            //gridViewVoucher.InitNewRow += new InitNewRowEventHandler(gridViewVoucher_InitNewRow);
        }

        public class PersonInfo
        {
            private string _ID;
            private string _Name;

            public PersonInfo(string ID, string Name)
            {
                _ID = ID;
                _Name = Name;
            }

            public override string ToString()
            {
                return _ID + ": " + _Name;
            }
        }

        private void gridViewVoucher_InitNewRow(object sender, DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs e)
        {
            // gridViewVoucher.SetRowCellValue(e.RowHandle, "RowID", Guid.NewGuid());
            //GridView view = sender as GridView;
            //view.SetRowCellValue(e.RowHandle, view.Columns["RowID"], Guid.NewGuid().ToString());

            DevExpress.XtraGrid.Views.Grid.GridView view = sender as GridView;
            //view.SetRowCellValue(e.RowHandle, "RowID", Guid.NewGuid().ToString());
            String RowID = Guid.NewGuid().ToString();
            File.WriteAllText(@"D:\TinPhatITSC\BlueStartGroup\TestGuidID.txt", "PhatTest: " + RowID);
            //  GridView view = sender as GridView;
            view.SetRowCellValue(e.RowHandle, view.Columns["RowID"], RowID);
            //gridViewVoucher.SetRowCellValue(e.RowHandle, "colRowID", RowID);
            //  view.SetRowCellValue(e.RowHandle, "RowID", RowID);
        }

        private void BTThem_Click(object sender, EventArgs e)
        {

        }

        private void btXoa_Click(object sender, EventArgs e)
        {
            //gridViewVoucher.DeleteRow(gridViewVoucher.FocusedRowHandle);
        }

        private void ACE_Them_Click(object sender, EventArgs e)
        {
            //gridViewVoucher.AddNewRow();
        }

        private void ACE_delete_Click(object sender, EventArgs e)
        {
            //gridViewVoucher.DeleteSelectedRows();
            // gridViewVoucher.DeleteRow(gridViewVoucher.FocusedRowHandle);

        }

        private void gridViewVoucher_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {

            //try
            //{
            //    //Your code...
            //    // Could also be before try if you know the exception occurs in SaveChanges

            //    dbContext.SaveChanges();
            //    }
            //    catch (DbEntityValidationException d)
            //    {
            //        foreach (var eve in d.EntityValidationErrors)
            //        {
            //            Console.WriteLine("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:",
            //                eve.Entry.Entity.GetType().Name, eve.Entry.State);
            //            foreach (var ve in eve.ValidationErrors)
            //            {
            //                Console.WriteLine("- Property: \"{0}\", Error: \"{1}\"",
            //                    ve.PropertyName, ve.ErrorMessage);
            //            }
            //        }
            //        throw;
            //    }

        }

        private void accordionControlElement1_Click(object sender, EventArgs e)
        {

        }

        private void ACE_CapNhat_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    dbContext.SaveChanges();
            //    MessageBox.Show("Lưu dữ liệu thành công!");
            //}
            //catch (Exception ex)
            //{
            //    MessageBox.Show(ex.Message.ToString(), "Lỗi lưu dữ liệu", MessageBoxButtons.OK, MessageBoxIcon.Error);

            //}
            //  context.SubmitChanges();


        }

        private void ACE_CapNhat_MouseHover(object sender, EventArgs e)
        {
            //ACE_CapNhat.BackColor = Color.Aqua;
        }

        private void ACE_CapNhat_MouseClick(object sender, MouseEventArgs e)
        {
            //ACE_CapNhat.BackColor = Color.White;
        }

        private void ACE_CapNhat_Leave(object sender, EventArgs e)
        {
            //ACE_CapNhat.ResetBackColor();
        }

        private void gridViewVoucher_RowCountChanged(object sender, EventArgs e)
        {

        }

        private void panelControl1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void labelControl13_Click(object sender, EventArgs e)
        {

        }

        private void simpleButton9_Click(object sender, EventArgs e)
        {

        }

        private void labelControl18_Click(object sender, EventArgs e)
        {

        }

        private void labelControl22_Click(object sender, EventArgs e)
        {

        }

        private void dateEditBDKT_CustomDisplayText(object sender, DevExpress.XtraEditors.Controls.CustomDisplayTextEventArgs e)
        {
            
        }
    }
}
